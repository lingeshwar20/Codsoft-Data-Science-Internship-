#Movie Rating Prediction Model

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import warnings
warnings.filterwarnings('ignore')


data = pd.read_csv("/content/IMDb Movies India.csv", encoding='latin1')

print(data.isnull().sum())

for col in data.select_dtypes(include=['object']):
    data[col] = data[col].fillna('Unknown')
label_encoder = LabelEncoder()
data['Director'] = label_encoder.fit_transform(data['Director'])
data['Actor 1'] = label_encoder.fit_transform(data['Actor 1'])
data['Actor 2'] = label_encoder.fit_transform(data['Actor 2'])
data['Actor 3'] = label_encoder.fit_transform(data['Actor 3'])


data['Votes'] = data['Votes'].replace('Unknown', np.nan)  
data['Votes'] = data['Votes'].str.replace(',', '') 
data['Votes'] = data['Votes'].str.replace(r'[()\$,]', '', regex=True) 
data['Votes'] = data['Votes'].str.replace('M', '').astype(float)  


data['Votes'] = data['Votes'].fillna(data['Votes'].median())


data['Year'] = data['Year'].str.replace(r'[()]', '', regex=True)  
data['Year'] = data['Year'].replace('Unknown', np.nan).astype(float)  


data['Duration'] = data['Duration'].str.extract('(\d+)').astype(float)  

data['Duration'] = data['Duration'].fillna(data['Duration'].median())
data['Year'] = data['Year'].fillna(data['Year'].median())
data.dropna(subset=['Rating'], inplace=True)
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), ['Year', 'Duration', 'Votes']),
        ('cat', OneHotEncoder(sparse=False, handle_unknown='ignore'), ['Genre']),  
        ('dir', 'passthrough', ['Director']),
        ('act1', 'passthrough', ['Actor 1']),
        ('act2', 'passthrough', ['Actor 2']),
        ('act3', 'passthrough', ['Actor 3'])
    ])
X = data.drop('Rating', axis=1)
y = data['Rating']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

model.fit(X_train, y_train) 
y_pred = model.predict(X_test)
print("Linear Regression MSE:", mean_squared_error(y_test, y_pred))


model_rf = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor())
])

model_rf.fit(X_train, y_train)
y_pred_rf = model_rf.predict(X_test)
print("Random Forest Regressor MSE:", mean_squared_error(y_test, y_pred_rf))
